const Req = {
    getUserAll: "SELECT * FROM utilisateur",
    verifyUser: "SELECT * FROM utilisateur WHERE id=? AND mdp=?",
    verifyAdmin: "SELECT * FROM administrateur WHERE id=? AND mdp=?",
    getUserById: "SELECT * FROM utilisateur WHERE id=?",
    getAdminById: "SELECT * FROM administrateur WHERE id=?",
    getAdminAll: "SELECT * FROM administrateur",
    addUser: "INSERT INTO utilisateur (nom, prenoms, numeroPiece, typePiece, dateNaissance, adresse, tel, mdp) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
    searchPlace: "SELECT place.id, place.nom, place.idPartie, place.occupee, (SELECT (6371 * acos(cos(radians(parking.lattitude)) * cos(radians(?)) * cos(radians(?) - radians(parking.longitude)) + sin(radians(parking.lattitude)) * sin(radians(?)))) FROM parking WHERE parking.id=(SELECT partie.idParking FROM partie WHERE partie.id=place.idPartie)) AS dist FROM place WHERE (SELECT COUNT(reservation.id) from reservation WHERE reservation.idPlace=place.id AND ((reservation.dateDebut>=? AND reservation.dateDebut<=?) OR (reservation.dateFin>=? AND reservation.dateFin<=?)))=0 ORDER BY dist ASC LIMIT 0,9",
    reserverPlace: "INSERT INTO reservation (idPlace, idUtilisateur, datePaiement, dateDebut, dateFin, sommePayee) VALUES (?, ?, NOW(), ?, ?, ?)",
    cancelReservation: "UPDATE reservation SET (annule=1) WHERE id=?",
    endReservation: "UPDATE reservation SET (annule=1) WHERE id=?",
    getReservationsByUser: "SELECT * FROM reservation WHERE idUtilisateur=?",
    getPlace: "SELECT place.id, place.nom, place.occupee, parking.id as idParking, parking.nom as nomParking, parking.adresse as adresseParking, parking.longitude, parking.lattitude, parking.prixmort, parking.prixplein FROM place LEFT JOIN parking ON parking.id=(SELECT partie.idParking FROM partie WHERE partie.id=place.idPartie) WHERE place.id=?",
    getFreeParkingPlaces: "SELECT place.id, place.nom, place.occupee, parking.id as idParking, parking.nom as nomParking, parking.adresse as adresseParking, parking.longitude, parking.lattitude, parking.prixmort, parking.prixplein FROM place LEFT JOIN parking ON parking.id=(SELECT partie.idParking FROM partie WHERE partie.id=place.idPartie AND partie.idParking=?) WHERE place.occupee=0",
    getParking: "SELECT * FROM parking WHERE id=?",
    getParkingPlaces: "SELECT * FROM place WHERE (SELECT partie.idParking FROM partie WHERE partie.id=place.idPartie)=?",
    getFreeParkingPlacesCount: "SELECT COUNT(place.id) as nb FROM place LEFT JOIN parking ON parking.id=(SELECT partie.idParking FROM partie WHERE partie.id=place.idPartie AND partie.idParking=?) WHERE place.occupee=0",
    setPlaceOccupation: "UPDATE place SET (occupee=?) WHERE id=?",
    sendNotif: "INSERT INTO notification (idUtilisateur, texte) VALUES (?, ?)",
    getPlaceOccupation: "SELECT occupee FROM place WHERE id=?",
    getNotifAll: "SELECT * FROM notification",
    getNotifByUser: "SELECT * FROM notification WHERE idUtilisateur=?",
    setParkingPrices: "UPDATE parking SET(prixmort=?, prixplein=?) WHERE id=?",
    setNotifLu: "UPDATE notification SET(lu=1) WHERE idUtilisateur=?",
    getParkingParties: "SELECT * FROM partie WHERE partie.idParking=?",
    getReservation: "SELECT * FROM reservation WHERE id=?",
    ajouterSolde: "UPDATE utilisateur SET solde=solde+? WHERE id=?",
    retirerSolde: "UPDATE utilisateur SET solde=solde-? WHERE id=?",
};

module.exports = Req;